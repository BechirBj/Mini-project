// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}



datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Language {
  Arabic
  English
  French
}

enum Currency {
  TND
  USD
  EUR
}

model Category {
  id               String      @id @default(uuid()) @db.Uuid
  parentCategoryId String?     @db.Uuid
  image            String?
  displayOrder     Int         @default(10000)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime @updatedAt
  parentCategory   Category?   @relation("hierarchy", fields: [parentCategoryId], references: [id])
  subcategories    Category[]  @relation("hierarchy")

  CategoryContent  CategoryContent[]
  products         ProductOnCategory[]
}


model CategoryContent {
  id String @id @default(uuid()) @db.Uuid

  categoryId    String     @db.Uuid
  name         String
  slug          String  
  description   String?
  language     Language  
  createdAt    DateTime  @default(now())
  updatedAt     DateTime   @updatedAt

  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  @@unique([slug,language])
}

model Product {
    id String @id @default(uuid()) @db.Uuid
  displayOrder Int  @default(10000)
  createdAt    DateTime  @default(now())
  updatedAt     DateTime   @updatedAt

  categories        ProductOnCategory[]
  ProductContents          ProductContent[]
  productItems              ProductItem[]
}

model ProductContent {
      id String @id @default(uuid()) @db.Uuid
  productId   String @db.Uuid
  name         String
  slug          String  
  description   String?
  details  String?
  language     Language  
    createdAt    DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

product Product @relation(fields:[productId],references:[id],onDelete:Cascade)
  @@unique([slug,language])

}



model ProductOnCategory {
  categoryId String @db.Uuid
  productId String      @db.Uuid

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([productId, categoryId])
}
model ProductItem {
      id String @id @default(uuid()) @db.Uuid

 productId  String     @db.Uuid

  barcode    String  @unique
  reference  String? @unique
  image      String? 
  online     Boolean              @default(true)
      createdAt    DateTime  @default(now())
  updatedAt     DateTime   @updatedAt


  product Product @relation(fields:[productId],references:[id],onDelete:Cascade)

  productItemPrices     ProductItemPrice[]


  ProductItemVariations ProductItemVariation[]


}


model ProductItemPrice{
      id String @id @default(uuid()) @db.Uuid
productItemId String @db.Uuid

  ProductItem ProductItem @relation(fields:[productItemId],references:[id],onDelete:Cascade)

  price Decimal? 
  currency Currency
        createdAt    DateTime  @default(now())
  updatedAt     DateTime  @updatedAt


}

model ProductItemVariation {
  id String @id @default(uuid()) @db.Uuid
  
  productItemId String @db.Uuid

  ProductItem ProductItem @relation(fields:[productItemId],references:[id],onDelete:Cascade)


  createdAt    DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

ProductItemVariationContents ProductItemVariationContent[]


}
model ProductItemVariationContent {
  id String @id @default(uuid()) @db.Uuid
productItemVariationId String  @db.Uuid
  PIVariation ProductItemVariation @relation(fields:[productItemVariationId],references:[id],onDelete:Cascade)
  
  name String
  value String
  language Language


    createdAt    DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

}